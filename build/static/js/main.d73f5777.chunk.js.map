{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DATE_KEY","moment","Date","format","INITIAL_STATE","loading","query","results","fetchData","debounce","type","mutate","a","state","axios","response","prevState","get","data","groups","console","error","ResultsList","className","map","result","key","venue","id","name","location","address","categories","category","join","WelcomeText","NoResults","Loading","alt","src","App","React","useState","setState","handleGeoData","geoData","coords","latitude","longitude","useEffect","navigator","geolocation","getCurrentPosition","onChange","event","target","value","length","placeholder","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d73f5777.chunk.js","sourcesContent":["import axios from 'axios';\nimport debounce from 'lodash/debounce'\nimport get from 'lodash/get';\nimport moment from 'moment';\nimport React from 'react';\nimport './App.css';\n\nconst CLIENT_ID = '22PFJDV1OOI3Q1GDZFOM30GWLOZRQ55W42KUOVSSO4I4KIBX'\nconst CLIENT_SECRET = 'PEKIXF4YWBV0TKUGBDMNY5HARFC13ZLUBZUVFKU10TCCWIE1'\nconst DATE_KEY = moment(new Date()).format('YYYYMMDD');\nconst END_POINT = 'https://api.foursquare.com/v2/venues/explore'\nconst INITIAL_STATE = { loading: false, query: '', results: [] }\nconst DEBOUNCE_WAIT = 400;\n\nconst fetchData = debounce(async function(query, type, mutate) {\n  mutate((state) => ({\n    ...state, loading: true,\n  }))\n\n  try {\n    const response = await axios(`${END_POINT}?${type}=${query}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&v=${DATE_KEY}`);\n\n    mutate((prevState) => ({\n      ...prevState,\n      loading: false,\n      results: get(response.data.response.groups[0], 'items', []),\n    }))\n  } catch (error) {\n    console.error(error);\n\n    mutate((prevState) => ({\n      ...prevState,\n      loading: false,\n      results: [],\n    }))\n  }\n}, DEBOUNCE_WAIT)\n\nconst ResultsList = ({ query, results }) => (\n  <>\n    <h2 className=\"resultsMessage\">Results for <span className=\"query\">{query}</span></h2>\n    <ul className=\"list\">\n      {results.map(result => (\n        <li className=\"venue\" key={result.venue.id}>\n          <h3 className=\"venueName\">{result.venue.name}</h3>\n          <address className=\"venueAddress\">{result.venue.location.address}</address>\n          <div className=\"venueCategory\">{result.venue.categories.map(category => category.name).join(', ')}</div>\n        </li>\n      ))}\n    </ul>\n  </>\n)\n\nconst WelcomeText = () => (\n  <h2 className=\"welcomeText\">Please enter an address to find nearby venues.</h2>\n)\n\nconst NoResults = ({ query }) => (\n  <h2 className=\"noResults\">No results found for {query}</h2>\n)\n\nconst Loading = () => (\n  <>\n    <h2 className=\"loadingHeading\">Fetching results...</h2>\n    <img className=\"loading\" alt=\"unicorn spinner\" src=\"./unicorn-spinner.gif\"/>\n  </>\n)\n\nconst App = () => {\n  const [state, setState] = React.useState(INITIAL_STATE);\n\n  const handleGeoData = (geoData) => {\n    const query = `${geoData.coords.latitude},${geoData.coords.longitude}`;\n\n    setState((prevState) => ({\n      ...prevState,\n      results: [],\n      query,\n    }));\n\n    fetchData(query, 'll', setState);\n  }\n\n  const handleOnChange = (query) => {\n    setState((prevState) => ({\n      ...prevState,\n      results: [],\n      query,\n    }))\n\n    if (query.length >= 3) {\n      fetchData(query, 'near', setState);\n    }\n  };\n\n  React.useEffect(() => {\n    navigator.geolocation.getCurrentPosition(handleGeoData);\n  }, [])\n\n\n  return (\n    <div className=\"base\">\n      <header className=\"header\">\n        <h1 className=\"title\">Venue finder</h1>\n        <input\n          className=\"input\"\n          onChange={(event) => handleOnChange(event.target.value)}\n          placeholder=\"address...\"\n          value={state.query}\n        />\n        {state.loading ? (\n          <Loading />\n        ) : state.query.length === 0 ? (\n          <WelcomeText />\n        ) : state.results.length === 0 ? (\n          <NoResults query={state.query} />\n        ) : (\n          <ResultsList query={state.query} results={state.results} />\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}